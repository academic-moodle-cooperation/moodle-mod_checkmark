{"version":3,"file":"checkboxcontroller.min.js","sources":["../src/checkboxcontroller.js"],"sourcesContent":["// This file is part of mod_checkmark for Moodle - http://moodle.org/\n//\n// It is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// It is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * checkboxcontroller.js\n *\n * @module   mod_checkmark/checkboxcontroller\n * @author    Philipp Hager\n * @copyright 2014 Academic Moodle Cooperation {@link http://www.academic-moodle-cooperation.org}\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n /**\n  * @module mod_checkmark/checkboxcontroller\n  */\ndefine(['jquery', 'core/log'], function($, log) {\n\n    /**\n     * @constructor\n     * @alias module:mod_checkmark/checkboxcontroller\n     */\n    var Checkboxcontroller = function() {\n        // Controller ID!\n        this.ID = '';\n        // Table ID!\n        this.table = $('.usersubmissions table.submissions');\n    };\n\n    /**\n     * Function updateSummary() updates the displayed summary during submission edit\n     *\n     * @param {Event} e event object\n     * @return {bool} true if everything's alright (no error handling by now)\n     */\n    Checkboxcontroller.prototype.updateCheckboxes = function(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        var type = e.data.type;\n\n        log.info('Update checkboxes (type = ' + type + ')');\n\n        // The .checkboxgroup1 selector is needed so only selection checkboxes are checked or unchecked.\n        if (type == 'all') {\n            $(e.data.inst.table + ' input[type=\"checkbox\"].checkboxgroup1').prop('checked', true);\n        } else if (type == 'none') {\n            $(e.data.inst.table + ' input[type=\"checkbox\"].checkboxgroup1').prop('checked', false);\n        } else {\n            var checkboxes = $(e.data.inst.table + ' input[type=\"checkbox\"].checkboxgroup1');\n\n            checkboxes.each(function(idx, current) {\n                if ($(current).data(type) == 1) {\n                    $(current).prop('checked', true);\n                } else {\n                    $(current).prop('checked', false);\n                }\n            });\n        }\n\n        return true;\n    };\n\n    var instance = new Checkboxcontroller();\n\n    /**\n     * Initializer prepares checkmark-data and registers event-listeners for each checkbox\n     *\n     * @param {array} params contains table and ID selectors\n     * @return {bool} true if everything's ok (no error-handling implemented)\n     */\n    instance.initializer = function(params) {\n        log.debug(\"Init checkboxcontroller (\" + params.id + \")!\\nfor table \" + params.table, 'checkmark');\n\n        if (params.table !== '') {\n            instance.table = params.table;\n        }\n        if (params.id !== '') {\n            instance.id = params.id;\n        } else {\n            instance.id = '';\n        }\n\n        $('#chmrk_selectallcb').click(function() {\n          if ($(\"#chmrk_selectallcb\").is(':checked')) {\n            $(' input[type=\"checkbox\"].checkboxgroup1').prop('checked', true);\n          } else {\n            $(' input[type=\"checkbox\"].checkboxgroup1').prop('checked', false);\n          }\n       });\n\n        $('#' + instance.id + ' a.all').on('click', null, {inst: this, type: 'all'}, this.updateCheckboxes);\n        $('#' + instance.id + ' a.none').on('click', null, {inst: this, type: 'none'}, this.updateCheckboxes);\n        $('#' + instance.id + ' a.graded').on('click', null, {inst: this, type: 'graded'}, this.updateCheckboxes);\n        $('#' + instance.id + ' a.submitted').on('click', null, {inst: this, type: 'submitted'}, this.updateCheckboxes);\n        $('#' + instance.id + ' a.ungraded').on('click', null, {inst: this, type: 'ungraded'}, this.updateCheckboxes);\n\n        return true;\n    };\n\n    return instance;\n});\n"],"names":["define","$","log","Checkboxcontroller","ID","table","prototype","updateCheckboxes","e","preventDefault","stopPropagation","type","data","info","inst","prop","each","idx","current","instance","initializer","params","debug","id","click","is","on","this"],"mappings":";;;;;;;;AA2BAA,0CAAO,CAAC,SAAU,aAAa,SAASC,EAAGC,SAMnCC,mBAAqB,gBAEhBC,GAAK,QAELC,MAAQJ,EAAE,uCASnBE,mBAAmBG,UAAUC,iBAAmB,SAASC,GACrDA,EAAEC,iBACFD,EAAEE,sBAEEC,KAAOH,EAAEI,KAAKD,QAElBT,IAAIW,KAAK,6BAA+BF,KAAO,KAGnC,OAARA,KACAV,EAAEO,EAAEI,KAAKE,KAAKT,MAAQ,0CAA0CU,KAAK,WAAW,QAC7E,GAAY,QAARJ,KACPV,EAAEO,EAAEI,KAAKE,KAAKT,MAAQ,0CAA0CU,KAAK,WAAW,OAC7E,CACcd,EAAEO,EAAEI,KAAKE,KAAKT,MAAQ,0CAE5BW,MAAK,SAASC,IAAKC,SACG,GAAzBjB,EAAEiB,SAASN,KAAKD,MAChBV,EAAEiB,SAASH,KAAK,WAAW,GAE3Bd,EAAEiB,SAASH,KAAK,WAAW,aAKhC,OAGPI,SAAW,IAAIhB,0BAQnBgB,SAASC,YAAc,SAASC,eAC5BnB,IAAIoB,MAAM,4BAA8BD,OAAOE,GAAK,iBAAmBF,OAAOhB,MAAO,aAEhE,KAAjBgB,OAAOhB,QACPc,SAASd,MAAQgB,OAAOhB,OAEV,KAAdgB,OAAOE,GACPJ,SAASI,GAAKF,OAAOE,GAErBJ,SAASI,GAAK,GAGlBtB,EAAE,sBAAsBuB,OAAM,WACxBvB,EAAE,sBAAsBwB,GAAG,YAC7BxB,EAAE,0CAA0Cc,KAAK,WAAW,GAE5Dd,EAAE,0CAA0Cc,KAAK,WAAW,MAIhEd,EAAE,IAAMkB,SAASI,GAAK,UAAUG,GAAG,QAAS,KAAM,CAACZ,KAAMa,KAAMhB,KAAM,OAAQgB,KAAKpB,kBAClFN,EAAE,IAAMkB,SAASI,GAAK,WAAWG,GAAG,QAAS,KAAM,CAACZ,KAAMa,KAAMhB,KAAM,QAASgB,KAAKpB,kBACpFN,EAAE,IAAMkB,SAASI,GAAK,aAAaG,GAAG,QAAS,KAAM,CAACZ,KAAMa,KAAMhB,KAAM,UAAWgB,KAAKpB,kBACxFN,EAAE,IAAMkB,SAASI,GAAK,gBAAgBG,GAAG,QAAS,KAAM,CAACZ,KAAMa,KAAMhB,KAAM,aAAcgB,KAAKpB,kBAC9FN,EAAE,IAAMkB,SAASI,GAAK,eAAeG,GAAG,QAAS,KAAM,CAACZ,KAAMa,KAAMhB,KAAM,YAAagB,KAAKpB,mBAErF,GAGJY,QACV"}